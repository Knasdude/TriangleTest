package org.example;

/**
 * Represents a right-angled triangle
 */
public class RightAngledTriangle extends Triangle implements Shape{

    /**
     * Constructor for a RightAngledTriangle
     *
     * @param point1 X and Y coordinate of the first point
     * @param point2 X and Y coordinate of the second point
     * @param point3 X and Y coordinate of the third point
     * @throws Exception If the triangle is not a right-angled triangle
     */
    public RightAngledTriangle(Point point1, Point point2, Point point3) throws Exception {
        super(point1, point2, point3);

        double[] sides = getSides();
        double a = sides[0];
        double b = sides[1];
        double c = sides[2];

        if (!(Math.abs((a * a + b * b) - (c * c)) < 0.01 || Math.abs((a * a + c * c) - (b * b)) < 0.01 || Math.abs((b * b + c * c) - (a * a)) < 0.01)) {
            throw new Exception("Not a Right Angled triangle");
        }
    }

    public double[] getAngles() {
        double[] sides = getSides();
        double a = sides[0];
        double b = sides[1];
        double c = sides[2];

        double angle1 = Math.toDegrees(Math.acos((b*b+c*c-a*a) / (2*b*c)));
        double angle2 = Math.toDegrees(Math.acos((a*a+c*c-b*b) / (2*a*c)));
        double angle3 = 180.0 - angle1 - angle2;

        double[] angleList = {angle1, angle2, angle3};
        return angleList;
    }

    @Override
    public double getCircumference() {
        double[] sides = getSides();
        return sides[0] + sides[1] + sides[2];
    }
}
